<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="1" />
	</beans:bean>

	<!-- Controller가 리턴한 json 객체 출력용 뷰 클래스 등록해야 함. maven 의 dependency 로 다운받아서 
		사용한다. -->
	<beans:bean
		class="net.sf.json.spring.web.servlet.view.JsonView" id="jsonView">
	</beans:bean>

	<!-- 파일 다운로드를 위한 뉴클래스 실행하는 viewResolver를 등록해야 함 주의할 점 : id 속성을 지정하지 않는다. 
		여러 개의 viewResolver를 등록할 때는 실행순서를 정해줘야 함. 파일 다운로드용 viewResolver가 반드시 맨처음으로 
		실행되게 순서를 지정한다. Controller 메소드가 리턴하는 뷰이름과 일치하는 뷰클래스가 있으면 자동으로 핻강 뷰클래스가 실행되게 
		된다. -->
	<beans:bean
		class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0" />
		<!-- 제일 먼저 실행되도록 순번 지정함 -->
	</beans:bean>

	<context:component-scan base-package="com.test.first" />
		
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<!-- 파일업로드용 클래스 등록 : 업로드시 파일 용량 제한 설정해야 함. (10MByte 로 지정해 봄) -->
	<beans:bean
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		id="multipartResolver">
		<beans:property name="maxUploadSize" value="10000000" />
	</beans:bean>
	
	<!-- 작성된 클래스를 다른 클래스에서 사용되게 하려면 등록해야 함.  -->
	<!-- <beans:bean class="com.test.first.common.FileDownloadView"
		id="filedown">
	</beans:bean> -->
	
	<!-- 클래스 위에 어노테이션을 사용해서 자동 등록처리되게 한다.  -->
	
	<!-- mvc 로그인 -->
	<interceptors>
	
	
	
	
	<!-- 로그인 상태에서 요청하는 서비스 체크용 인터셉터 -->
	<interceptor>
			<mapping path="/bwform.do" />
			<mapping path="/myinfo.do" />
			<mapping path="/mupdate.do" />
			<mapping path="/breplyform.do" />
			<beans:bean
				class="com.test.first.common.intercepter.LoginCheckInterceptor"
				id="loginCheckIntercepter" />
	</interceptor>
	
	<!-- 인터셉터 작동 위치 확인용 로그인터셉터 -->
	<interceptor>
		<mapping path="/**" />
		<beans:bean
			class="com.test.first.common.intercepter.LoggerInterceptor"
			id="loggerInterceptor"/>
	</interceptor>
	</interceptors>






</beans:beans>
